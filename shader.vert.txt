#version 330

layout(location = 0) in vec3 pos;  
layout(location = 1) in vec2 tex;
layout(location = 2) in vec3 norm;

out vec4 vCol;   
out vec2 TexCoord;
out vec4 kolorek;
out vec3 Normal;
out vec3 FragPos;
flat out int textureOn;

uniform mat4 model; 	//macierz modelu - importowana z programu wywołującego
uniform mat4 projection; //macierz perspektywy - jw.
uniform mat4 view;	//macierz widoku - jw.
uniform vec4 kolor;
uniform int textureOnPar;

void main() {    
	gl_Position = projection * view * model * vec4(pos, 1.0);   //ESENCJA PROGRAMU - MNOŻENIE MACIERZY ODBYWA SIĘ W GPU
	vCol = vec4(clamp(pos, 0.0f, 1.0f), 1.0f);    
	kolorek = kolor;
	textureOn = textureOnPar;
	TexCoord = tex;
	Normal = mat3(transpose(inverse(model))) * norm;
	FragPos = (model * vec4(pos, 1.0)).xyz;
}   